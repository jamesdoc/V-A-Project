#!/usr/bin/env python

import optparse, requests, sys
	
def vamApiSearch(query):
    """Queries the V&A object database for key material
    
    returns result as string"""
    
    base_url = 'http://www.vam.ac.uk/api/json/museumobject/search';
    
    queryString = {'limit':'10'}
    
    if query.material:
    	queryString['materialsearch'] = query.material
    	
    if query.name:
    	queryString['objectnamesearch'] = query.name
    	
    if query.place:
    	queryString['placesearch'] = query.place
    
    if query.before and query.before.isdigit():
    	queryString['before'] = query.before
    	
    if query.after and query.after.isdigit():
    	queryString['after'] = query.after
    
    '''
    try:
        response = urllib2.urlopen(base_url, timeout = 1)
        return response.read()
    except urllib2.URLError, e:
        print 'network error'
        sys.exit()
    '''
    r = requests.get(base_url, params=queryString)
    return r.json()
        
def outputTable(json_object):
	"""Takes JSON from V&A API and returns a lovely table
	
	Output string"""
	
	print '<table>';\
	print '<thead><tr><th>Name</th><th>Location</th><th>Year</th></tr></thead>';\
	
	if json_object['meta']['result_count'] == 0:
		print '<tr><td colspan="4">No results to display</td></tr>';
		
	else:
		for item in json_object['records']: 
			
			print '<tr>';\
			
			if item['fields']['title']:
				print '<td>' + item['fields']['title'] + ' - ' + item['fields']['object'] + '</td>';\
				
			else:
				print '<td>' + item['fields']['object'] + '</td>';\
			
			print '<td>' + item['fields']['location'] + '</td>';\
			print '<td>' + item['fields']['place'] + '</td>';\
			print '<td>' + str(item['fields']['year_start']) + '</td>';\
			print '</tr>';\
		
	print '</table>';\


def getData():
	"""Accepts a search term
	
	returns html table"""
	
	p = optparse.OptionParser()
	p.add_option('--material', '-m')
	p.add_option('--name', '-n')
	p.add_option('--before', '-b')
	p.add_option('--after', '-a')
	p.add_option('--place', '-p')
	options, arguments = p.parse_args()
	
	search = vamApiSearch(options)
	
	outputTable(search)

if __name__ == '__main__':
	getData()